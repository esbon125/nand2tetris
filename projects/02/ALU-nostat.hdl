// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU-nostat {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16]; // 16-bit output
        

    PARTS:
    //x
    //Operations
    And16(a=x, b=false, out=zerox);
    Not16(in=muxzx, out=notmuxzx);
        
    //Multiplexers
    Mux16(a=x, b=zerox,sel=zx, out=muxzx);
    Mux16(a=muxzx, b=notmuxzx, sel=nx, out=muxnx);
            
    //y
    //Operations
    And16(a=y, b=false, out=zeroy);
    Not16(in=muxzy, out=notmuxzy);
    //Multiplexers
    Mux16(a=y, b=zeroy,sel=zy, out=muxzy);
    Mux16(a=muxzy, b=notmuxzy, sel=ny, out=muxny);
    
    //f
    Add16(a=muxnx, b=muxny, out=fxaddy);
    And16(a=muxnx, b=muxny, out=fxandy);
    Mux16(a=fxandy, b=fxaddy, sel=f, out=muxf);  
    //no
    Not16(in=muxf, out=notmuxf);
    Mux16(a=muxf, b=notmuxf, sel=no, out=out);
}